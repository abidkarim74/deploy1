generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  STUDENT
  FACULTY
}

enum Gender {
  MALE
  FEMALE
}

enum VehicleType {
  FOURWHEEL
  TWOWHEEL
}

model Review {
  id         String @id @default(uuid())
  reviewer   User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
  comment    String
}

model Complain {
  id           String @id @default(uuid())
  complainer   User   @relation(fields: [complainerId], references: [id], onDelete: Cascade)
  complainerId String
  complain     String
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique
  fullname String
  password String
  gender   Gender @default(MALE)
  driver   Boolean @default(false)

  profilePic   String?
  isSuspended  Boolean @default(false)
  type         Type    @default(STUDENT)
  isAdmin      Boolean @default(false)
  phone        String?
  rating       Float   @default(0.0)
  reviews      Review[]
  complains    Complain[]

  conversations Conversation[]
  notifications Notification[] @relation("UserNotifications")
  notifiers     Notification[] @relation("NotifierNotifications")
  messages      Message[]
  vehicles      Vehicle? 
  ridesAsPassenger RealTimeCarpoolRide[] @relation("PassengerRides")
  ridesAsDriver    RealTimeCarpoolRide[] @relation("DriverRides")

  postAsPassenger CarpoolRequestPost[] @relation("PassengerPosts")
  postAsDriver    CarpoolRequestPost[] @relation("DriverPosts")
}

model Message {
  id             String   @id @default(uuid())
  message        String
  sender        User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId      String
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  createdAt     DateTime @default(now())
  editedAt      DateTime @updatedAt
}

model Conversation {
  id       String    @id @default(uuid())
  name     String
  users    User[] 
  messages Message[]
}

model Vehicle {
  id          String      @id @default(uuid())
  type        VehicleType @default(FOURWHEEL)
  name        String
  numberPlate String
  model       String
  color       String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique 
  vehiclePics String[]
}

model RealTimeCarpoolRide {
  id           String @id @default(uuid())
  pickLocation String
  dropLocation String
  time         DateTime @default(now())
  cost         Int
  isAccpted    Boolean @default(false)

  passenger    User @relation("PassengerRides", fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId  String

  driver       User? @relation("DriverRides", fields: [driverId], references: [id], onDelete: Cascade)
  driverId     String
}


model CarpoolRequestPost {
  id           String @id @default(uuid()) 
  poster       User   @relation("PassengerPosts", fields: [posterId], references: [id], onDelete: Cascade)
  posterId     String
  otherUser    User?  @relation("DriverPosts", fields: [otherId], references: [id], onDelete: Cascade)
  otherId      String?
  time         DateTime @default(now()) @updatedAt
  pickLocation String
  dropLocation String 
  isAccepted   Boolean @default(false)
  caption      String
  cost         Float
}


model Notification {
  id         String   @id @default(uuid())
  time       DateTime @default(now())  
  message    String
  read Boolean @default(false)
  userId     String   
  user       User     @relation("UserNotifications", fields: [userId], references: [id])
  notifierId String
  notifier   User     @relation("NotifierNotifications", fields: [notifierId], references: [id])
}

